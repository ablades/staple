{"version":3,"sources":["components/DisplayMarkdown/DisplayMarkDown.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["DisplayMarkdown","props","state","value","handleChange","bind","event","this","setState","target","className","onChange","source","Component","Header","logo","companyName","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRA4CeA,G,yDAvCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAM,qDAGV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANL,E,yDASNC,GACTC,KAAKC,SAAS,CAACL,MAAOG,EAAMG,OAAON,U,+BAInC,OACI,yBAAKO,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,gBACX,uCAEJ,yBAAKA,UAAU,gBACX,yCAGR,yBAAKA,UAAU,YACX,yBAAKA,UAAU,UACX,8BAAUP,MAAOI,KAAKL,MAAMC,MAAOQ,SAAUJ,KAAKH,gBAEtD,yBAAKM,UAAU,WACX,kBAAC,IAAD,CAAsDE,OAAQL,KAAKL,MAAMC,e,GA9BnEU,c,OCiBfC,MAlBf,SAAgBb,GAAQ,IACZc,EAAsBd,EAAtBc,KAAMC,EAAgBf,EAAhBe,YAEd,OACI,yBAAKN,UAAU,UACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,QAAQK,GACvB,6BAAMC,IAGV,yBAAKN,UAAU,eACX,yCACA,8C,OCHDO,MATf,SAAgBhB,GAEZ,OACI,4BAAQS,UAAU,UACd,sCCUGQ,MAXf,WAEE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQK,KAAK,GAAGC,YAAY,SAC5B,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e179880e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './DisplayMarkdown.css'\n\nclass DisplayMarkdown extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: `# Markdown Editor\\n\\`code block\\`\\n\\n## Subheader\\n`\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n    \n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className='DisplayMarkdown'>\n                <div className=\"row\">\n                    <div className=\"inner-header\">\n                        <h1>Editor</h1>\n                    </div>\n                    <div className=\"inner-header\">\n                        <h1>Preview</h1>\n                    </div>\n                </div>\n                <div className=\"row long\">\n                    <div className=\"editor\">\n                        <textarea value={this.state.value} onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"preview\">\n                        <ReactMarkdown                                        source={this.state.value}\n                            />\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default DisplayMarkdown;","import React from 'react'\nimport './Header.css'\n\nfunction Header(props) {\n    const { logo, companyName } = props\n\n    return (\n        <div className=\"header\">\n            <div className=\"badge\">\n                <div className=\"logo\">{logo}</div>\n                <div>{companyName}</div>\n            </div>\n\n            <div className=\"authbuttons\">\n                <button>Login</button>\n                <button>Log Out</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport './Footer.css'\n\nfunction Footer(props) {\n\n    return (\n        <footer className=\"footer\">\n            <span>:)</span>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react';\nimport './App.css';\nimport DisplayMarkdown from './components/DisplayMarkdown/DisplayMarkDown';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header logo=\"\" companyName=\"test\"/>\n      <DisplayMarkdown />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}